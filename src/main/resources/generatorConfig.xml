<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>

    <!--id:必选，上下文id，用于在生成错误时提示-->
    <context id="mysql" targetRuntime="MyBatis3">

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 对注释进行控制 -->
        <commentGenerator>
            <!-- suppressDate是去掉生成日期那行注释 -->
            <property name="suppressDate" value="true"/>
            <!-- suppressAllComments是去掉所有的注解 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection
                driverClass="com.mysql.jdbc.Driver"
                connectionURL="jdbc:mysql://rm-2zea3p7q7lrvjs8s4.mysql.rds.aliyuncs.com:3306/hspsec_biz?characterEncoding=utf8"
                userId="hspsec"
                password="Hspsec#123">
        </jdbcConnection>
        <!--<jdbcConnection driverClass="com.mysql.jdbc.Driver"-->
                        <!--connectionURL="jdbc:mysql://rm-2zea3p7q7lrvjs8s4.mysql.rds.aliyuncs.com:3306/hspsec_sys?characterEncoding=utf8"-->
                        <!--userId="hspsec"-->
                        <!--password="Hspsec#123">-->
            <!--<property name="useInformationSchema" value="true"></property>-->
        <!--</jdbcConnection>-->

        <!-- java类型处理器
        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!-- java模型创建器，是必须要的元素
            负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
         -->
        <javaModelGenerator targetPackage="com.lightinit.economicinformation.entity" targetProject="src/main/java">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="false"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!-- 生成SQL map的XML文件生成器，
            注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
                或者只使用Mapper接口+Annotation，
                所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
            targetPackage/targetProject:同javaModelGenerator
         -->
        <!--数据库database1逆向生成的-->
        <!--<sqlMapGenerator targetPackage="sqlMapper1" targetProject="src/main/resources/sqlMappers">-->
            <!--&lt;!&ndash; 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false &ndash;&gt;-->
            <!--<property name="enableSubPackages" value="true"/>-->
        <!--</sqlMapGenerator>-->

        <!--数据库database2逆向生成的-->
        <sqlMapGenerator targetPackage="sqlMapper2" targetProject="src/main/resources/sqlMappers">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>


        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <!--数据库database1逆向生成的-->
        <!--<javaClientGenerator targetPackage="com.lightinit.economicinformation.mapper.mapper1" type="XMLMAPPER" targetProject="src/main/java">-->
            <!--&lt;!&ndash; 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false &ndash;&gt;-->
            <!--<property name="enableSubPackages" value="true"/>-->
        <!--</javaClientGenerator>-->

        <!--数据库database2逆向生成的-->
        <javaClientGenerator targetPackage="com.lightinit.economicinformation.mapper.mapper2" type="XMLMAPPER" targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            tableName（必要）：要生成对象的表名；
            domainObjectName 给表对应的 model 起名字
            注意：大小写敏感问题。
         -->
                <table tableName="biz_vote" domainObjectName="BasicDictionary"></table>
<!--                <table tableName="basic_dictionary_data_type" domainObjectName="BasicDictionaryDataType"></table>-->

<!--                <table tableName="fz_equipment" domainObjectName="FzEquipment"/>-->
                <!--<table tableName="fz_hospitalized_info" domainObjectName="FzHospitalizedInfo"/>-->
<!--                <table tableName="fz_score_describe" domainObjectName="FzScoreDescribe"/>-->
<!--                <table tableName="fz_score_item" domainObjectName="FzScoreItem"/>-->
<!--                <table tableName="fz_score_type" domainObjectName="FzScoreType"/>-->
<!--                <table tableName="hs_collar_medicine" domainObjectName="HsCollarMedicine"/>-->
<!--                <table tableName="hs_consumables" domainObjectName="HsConsumables"/>-->
<!--                <table tableName="hs_consumables_item" domainObjectName="HsConsumablesItem"/>-->
<!--                <table tableName="sys_admin_info" domainObjectName="SysAdminInfo"/>-->
<!--                <table tableName="sys_electronic_record" domainObjectName="SysElectronicRecord"/>-->
<!--                <table tableName="sys_inpatient_area" domainObjectName="SysInpatientArea"/>-->
<!--                <table tableName="sys_inpatient_info" domainObjectName="SysInpatientInfo"/>-->
                <!--<table tableName="sys_user" domainObjectName="SysUser"/>-->
                <!--<table tableName="ys_inspect" domainObjectName="YsInspect"/>-->
                <!--<table tableName="ys_inspect_statis" domainObjectName="YsInspectStatis"/>-->
                <!--<table tableName="hs_inspect_item" domainObjectName="HsInspectItem"/>-->
<!--                <table tableName="ys_medicine_item" domainObjectName="YsMedicineItem"/>-->
<!--                <table tableName="ys_medicine_type" domainObjectName="YsMedicineType"/>-->
                <!--<table tableName="jc_verification_typeone" domainObjectName="JcVerificationTypeone"/>-->
                <!--<table tableName="jc_verification_typetwo" domainObjectName="JcVerificationTypetwo"/>-->
                <!--<table tableName="ys_verification" domainObjectName="YsVerification"/>-->
                <!--<table tableName="hs_verification_item" domainObjectName="HsVerificationItem"/>-->
                <!--<table tableName="ys_verification_statis" domainObjectName="YsVerificationStatis"/>-->
                <!--<table tableName="hs_inspect_item" domainObjectName="HsInspectItem"/>-->
                <!--<table tableName="ys_inspect" domainObjectName="YsInspect"/>-->
                <!--<table tableName="jc_user_info" domainObjectName="JcUserInfo"/>-->

        <!--<table tableName="ys_diagnosis_item" domainObjectName="YsDiagnosisItem"/>-->
        <!--<table tableName="ys_diagnosis_item_statis" domainObjectName="YsDiagnosisItemStatis"/>-->
        <!--<table tableName="jc_hospitalized_statis" domainObjectName="JcHospitalizedStatis"/>-->

    </context>

</generatorConfiguration>